#!/bin/bash

# üìå Fonction pour afficher l'aide
function show_help {
    echo "Usage: $0 NOM_CONTENEUR NOM_BDD NOM_UTILISATEUR MOT_DE_PASSE FICHIER_SQL"
    echo ""
}

# üìå V√©rification du nombre d'arguments
if [[ $# -lt 5 ]]; then
    echo "‚ùå Trop peu de param√®tres. Vous devez fournir :"
    echo " 1. Nom du conteneur PostgreSQL"
    echo " 2. Nom de la base de donn√©es"
    echo " 3. Nom d'utilisateur PostgreSQL"
    echo " 4. Mot de passe PostgreSQL"
    echo " 5. Fichier SQL √† importer"
    show_help
    exit 1
fi

# üìå Assignation des arguments
CONTAINER_NAME="$1"
DB_NAME="$2"
PG_USER="$3"
PG_PASSWORD="$4"
SELECTED_FILE="$5"

if [[ "$DB_EXISTS" == "1" ]]; then
    echo "‚ö†Ô∏è La base '$DB_NAME' existe d√©j√†. Suppression en cours..."
    docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "DROP DATABASE \"$DB_NAME\";"
else
    echo "‚úÖ La base '$DB_NAME' n'existe pas."
fi


# üìå Suppression des tables existantes (en cas de n√©cessit√©)
echo "üßπ Suppression des anciennes tables..."
docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"


echo "üì• Fichier s√©lectionn√© : $SELECTED_FILE"
echo "üîç V√©rification de l'existence de la base '$DB_NAME'..."

# üìå V√©rifier si la base de donn√©es existe, sinon la cr√©er
export PGPASSWORD=$PG_PASSWORD
DB_EXISTS=$(docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" | tr -d '[:space:]')
if [[ "$DB_EXISTS" != "1" ]]; then
    echo "‚ö†Ô∏è La base '$DB_NAME' n'existe pas. Cr√©ation en cours..."
    docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "CREATE DATABASE \"$DB_NAME\";"
    echo "‚úÖ Base '$DB_NAME' cr√©√©e avec succ√®s."
else
    echo "‚úÖ La base '$DB_NAME' existe d√©j√†."
fi

# üìå Importation de la base de donn√©es
echo "üì• Importation en cours..."
docker exec -i "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" < "$SELECTED_FILE"
if [[ $? -eq 0 ]]; then
    echo "‚úÖ Importation termin√©e avec succ√®s."
else
    echo "‚ùå Erreur lors de l'importation."
    exit 1
fi

# üìå Restaurer les fichiers upload√©s si un fichier ZIP est trouv√©
UPLOAD_ZIP="uploads_backup_${DB_NAME}_*.zip"
UPLOAD_ZIP_FILE=$(ls $UPLOAD_ZIP 2>/dev/null | head -n 1)
if [[ -n "$UPLOAD_ZIP_FILE" ]]; then
    echo "üì¶ D√©tection d'une sauvegarde des fichiers uploads : $UPLOAD_ZIP_FILE"
    read -p "‚ö†Ô∏è Veux-tu restaurer les fichiers uploads ? (oui/non) : " CONFIRM_UPLOADS
    
    if [[ "$CONFIRM_UPLOADS" == "oui" ]]; then
        unzip -o "$UPLOAD_ZIP_FILE" -d .
        echo "‚úÖ Fichiers uploads restaur√©s."
    else
        echo "‚ö†Ô∏è Restauration des fichiers uploads annul√©e."
    fi
else
    echo "‚ö†Ô∏è Aucun fichier de sauvegarde d'uploads trouv√©."
fi

echo "üéâ Restauration termin√©e avec succ√®s !"
