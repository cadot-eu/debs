#!/bin/bash

# üìå Demande interactive pour les param√®tres
read -p "Nom du conteneur PostgreSQL (par d√©faut : database) : " CONTAINER_NAME
CONTAINER_NAME=${CONTAINER_NAME:-database}

read -p "Nom de la base de donn√©es : " DB_NAME
read -p "Nom d'utilisateur PostgreSQL : " PG_USER
read -sp "Mot de passe PostgreSQL : " PG_PASSWORD
echo ""

# üìå Lister les fichiers de sauvegarde disponibles
SQL_FILES=(*.sql)
if [[ ${#SQL_FILES[@]} -eq 0 ]]; then
    echo "‚ùå Aucun fichier SQL trouv√© pour l'importation."
    exit 1
fi

echo "üìÇ Fichiers de sauvegarde disponibles :"
for i in "${!SQL_FILES[@]}"; do
    echo "   [$i] ${SQL_FILES[$i]}"
done

# üìå Demander √† l'utilisateur de choisir un fichier
read -p "Quel fichier veux-tu importer ? (num√©ro) : " FILE_INDEX
if ! [[ "$FILE_INDEX" =~ ^[0-9]+$ ]] || (( FILE_INDEX < 0 || FILE_INDEX >= ${#SQL_FILES[@]} )); then
    echo "‚ùå S√©lection invalide."
    exit 1
fi

SELECTED_FILE="${SQL_FILES[$FILE_INDEX]}"
echo "üì• Fichier s√©lectionn√© : $SELECTED_FILE"

# üìå V√©rifier si la base de donn√©es existe, sinon la cr√©er
echo "üîç V√©rification de l'existence de la base '$DB_NAME'..."
export PGPASSWORD=$PG_PASSWORD
DB_EXISTS=$(docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" | tr -d '[:space:]')

if [[ "$DB_EXISTS" != "1" ]]; then
    echo "‚ö†Ô∏è  La base '$DB_NAME' n'existe pas. Cr√©ation en cours..."
    docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "CREATE DATABASE \"$DB_NAME\";"
    echo "‚úÖ Base '$DB_NAME' cr√©√©e avec succ√®s."
else
    echo "‚úÖ La base '$DB_NAME' existe d√©j√†."
fi

# üìå Demande de confirmation avant l'import
read -p "‚ö†Ô∏è  Es-tu s√ªr de vouloir restaurer '$SELECTED_FILE' dans '$DB_NAME' ? (oui/non) : " CONFIRM
if [[ "$CONFIRM" != "oui" ]]; then
    echo "‚ùå Import annul√©."
    exit 1
fi

# üìå Importer la base de donn√©es
echo "üì• Importation en cours..."
docker exec -i "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" < "$SELECTED_FILE"

if [[ $? -eq 0 ]]; then
    echo "‚úÖ Importation termin√©e avec succ√®s."
else
    echo "‚ùå Erreur lors de l'importation."
    exit 1
fi

# üìå Restaurer les fichiers upload√©s si un fichier ZIP est trouv√©
UPLOAD_ZIP="uploads_backup_${DB_NAME}_*.zip"
UPLOAD_ZIP_FILE=$(ls $UPLOAD_ZIP 2>/dev/null | head -n 1)

if [[ -n "$UPLOAD_ZIP_FILE" ]]; then
    echo "üì¶ D√©tection d'une sauvegarde des fichiers uploads : $UPLOAD_ZIP_FILE"
    read -p "‚ö†Ô∏è  Veux-tu restaurer les fichiers uploads ? (oui/non) : " CONFIRM_UPLOADS
    if [[ "$CONFIRM_UPLOADS" == "oui" ]]; then
        unzip -o "$UPLOAD_ZIP_FILE" -d .
        echo "‚úÖ Fichiers uploads restaur√©s."
    else
        echo "‚ö†Ô∏è  Restauration des fichiers uploads annul√©e."
    fi
else
    echo "‚ö†Ô∏è Aucun fichier de sauvegarde d'uploads trouv√©."
fi

echo "üéâ Restauration termin√©e avec succ√®s !"
