#!/bin/bash

# Gestion du param√®tre --pass
for arg in "$@"; do
    if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
        echo "\"Reset and import PostgreSQL database: [container] [db] [user] [password] [file]\""
        echo "Option suppl√©mentaire : --pass <mot_de_passe> pour d√©finir le mot de passe PostgreSQL."
        exit 0
    fi
    if [[ "$arg" == --pass* ]]; then
        PG_PASSWORD="${arg#--pass }"
    fi
done

# üóëÔ∏è Script complet : Suppression compl√®te + Import PostgreSQL
# Usage: ./postgres_reset_import.sh [conteneur] [db] [user] [password] [fichier]

# üìå R√©cup√®re le nom du dossier courant
DEFAULT_NAME=$(basename "$PWD")

# üìå Valeurs par d√©faut bas√©es sur le nom du dossier
DEFAULT_CONTAINER="${DEFAULT_NAME}-db"
DEFAULT_DB="${DEFAULT_NAME}"
DEFAULT_USER="${DEFAULT_NAME}"
DEFAULT_VOLUME="database_data-${DEFAULT_NAME}"


# Si le mot de passe est pass√© en argument, on utilise tous les param√®tres par d√©faut sans interaction
if [[ -n "$PG_PASSWORD" ]]; then
    CONTAINER_NAME="$DEFAULT_CONTAINER"
    DB_NAME="$DEFAULT_DB"
    PG_USER="$DEFAULT_USER"
    VOLUME_NAME="$DEFAULT_VOLUME"
else
    # üìå Demande d'infos avec valeurs par d√©faut intelligentes
    read -p "Nom du conteneur PostgreSQL (par d√©faut: ${DEFAULT_CONTAINER}): " CONTAINER_NAME
    CONTAINER_NAME=${CONTAINER_NAME:-$DEFAULT_CONTAINER}
    
    read -p "Nom de la base de donn√©es (par d√©faut: ${DEFAULT_DB}): " DB_NAME
    DB_NAME=${DB_NAME:-$DEFAULT_DB}
    
    read -p "Nom de l'utilisateur PostgreSQL (par d√©faut: ${DEFAULT_USER}): " PG_USER
    PG_USER=${PG_USER:-$DEFAULT_USER}
    
    read -p "Mot de passe PostgreSQL (par d√©faut: vide): " PG_PASSWORD
    
    VOLUME_NAME=$DEFAULT_VOLUME
fi



# üìå S√©lection du fichier SQL
JOUR=$(date +"%A")
DEFAULT_SQL_FILE="backups/${DEFAULT_NAME}_${JOUR}.sql"

if [ -f ".env.local" ]; then
    SSH_HOST=$(grep '^SSH=' .env.local | cut -d '=' -f2)
    if [[ -n "$PG_PASSWORD" ]]; then
        # Mode automatique : s√©lectionne le fichier du jour
        SELECTED_FILE="$DEFAULT_SQL_FILE"
        SELECTED_FILE_LOCAL=$(basename "$SELECTED_FILE")
        echo "Import automatique : $SELECTED_FILE"
        scp $SSH_HOST:$SELECTED_FILE .
        SELECTED_FILE_TAR_GZ=${SELECTED_FILE%.sql}.tar.gz
        scp $SSH_HOST:backups/$SELECTED_FILE_TAR_GZ . 2>/dev/null
        SELECTED_FILE="$SELECTED_FILE_LOCAL"
    else
        distant_files=$(ssh $SSH_HOST "ls -1 backups/${DEFAULT_NAME}_*.sql" 2>/dev/null | nl)
        echo "\nüìÅ Fichiers SQL distants :"
        echo "$distant_files"
        # Place le fichier du jour en premier dans la liste
        distant_files=$(ssh $SSH_HOST "ls -1 backups/${DEFAULT_NAME}_*.sql" 2>/dev/null)
        if echo "$distant_files" | grep -qx "$DEFAULT_SQL_FILE"; then
            files_list="$DEFAULT_SQL_FILE\n$(echo \"$distant_files\" | grep -v \"$DEFAULT_SQL_FILE\")"
        else
            files_list="$distant_files"
        fi
        files_list_numbered=$(echo "$files_list" | nl)
        echo "\nüìÅ Fichiers SQL distants :"
        echo "$files_list_numbered"
        read -p "Num√©ro du fichier √† importer : " file_number
        SELECTED_FILE=$(echo "$files_list" | awk -v num="$file_number" 'NR == num {print $1}')
        if [ -z "$SELECTED_FILE" ]; then
            echo "‚ùå S√©lection invalide."
            exit 1
        fi
        scp $SSH_HOST:$SELECTED_FILE .
        SELECTED_FILE_TAR_GZ=${SELECTED_FILE%.sql}.tar.gz
        read -p "Voulez-vous r√©cup√©rer le fichier tar.gz associ√© ? (O/n): " response
        response=${response,,}
        if [[ -z "$response" || "$response" == "o" || "$response" == "y" ]]; then
            scp $SSH_HOST:backups/$SELECTED_FILE_TAR_GZ .
        fi
    fi
else
    if [[ -n "$PG_PASSWORD" ]]; then
        # Mode automatique : s√©lectionne le fichier du jour
        SELECTED_FILE="$DEFAULT_SQL_FILE"
        echo "Import automatique : $SELECTED_FILE"
    else
        select_file=$(ls backups/${DEFAULT_NAME}_*.sql 2>/dev/null | nl)
        echo "\nüìÅ Fichiers SQL locaux :"
        echo "$select_file"
        local_files=$(ls backups/${DEFAULT_NAME}_*.sql 2>/dev/null)
        if echo "$local_files" | grep -qx "$DEFAULT_SQL_FILE"; then
            files_list="$DEFAULT_SQL_FILE\n$(echo \"$local_files\" | grep -v \"$DEFAULT_SQL_FILE\")"
        else
            files_list="$local_files"
        fi
        files_list_numbered=$(echo "$files_list" | nl)
        echo "\nüìÅ Fichiers SQL locaux :"
        echo "$files_list_numbered"
        read -p "Num√©ro du fichier √† importer : " file_number
        SELECTED_FILE=$(echo "$files_list" | awk -v num="$file_number" 'NR == num {print $1}')
        if [[ ! -f "$SELECTED_FILE" ]]; then
            echo "‚ùå Fichier s√©lectionn√© introuvable."
            exit 1
        fi
    fi
fi


# Si SELECTED_FILE est d√©j√† d√©fini (fichier distant s√©lectionn√©), ne pas redemander la s√©lection locale
if [ -z "$SELECTED_FILE" ]; then
    echo "üìÅ Fichiers SQL disponibles :"
    echo "$select_file"
    read -p "Num√©ro du fichier SQL ou dump √† importer: " file_number
    SELECTED_FILE=$(echo "$select_file" | awk -v num="$file_number" '$1 == num {print $2}')
    if [ -z "$SELECTED_FILE" ]; then
        echo "‚ùå S√©lection invalide. Veuillez choisir un num√©ro de fichier correct."
        exit 1
    fi
fi


# Si --pass est utilis√©, ignore les arguments positionnels
if [[ -n "$PG_PASSWORD" ]]; then
    # On garde les valeurs par d√©faut d√©j√† d√©finies
    :
else
    # üìå Assignation des arguments en ligne de commande (prioritaire)
    CONTAINER_NAME=${1:-$CONTAINER_NAME}
    DB_NAME=${2:-$DB_NAME}
    PG_USER=${3:-$PG_USER}
    PG_PASSWORD=${4:-$PG_PASSWORD}
    SELECTED_FILE=${5:-$SELECTED_FILE}
fi

# üìå V√©rifier si le fichier d'import existe
if [[ ! -f "$SELECTED_FILE" ]]; then
    echo "‚ùå Le fichier d'importation '$SELECTED_FILE' n'existe pas."
    exit 1
fi


echo "üöÄ Configuration : üì¶ Conteneur: $CONTAINER_NAME üóÑÔ∏è Base: $DB_NAME üë§ Utilisateur: $PG_USER üìÅ Fichier: $SELECTED_FILE üíæ Volume: $VOLUME_NAME"

# üìå Liste des tables dans le fichier SQL (sans pr√©fixe public.)
tables_in_sql=$(grep -iE '^CREATE TABLE|^create table' "$SELECTED_FILE" | awk '{print $3}' | sed 's/"//g;s/^public\.//g' | sort | uniq)
echo "Tables SQL : $(echo "$tables_in_sql" | paste -sd ' ')"

# üìå SUPPRESSION COMPL√àTE SI DEMAND√âE
if [[ "$PURGE_VOLUME" == "y" || "$PURGE_VOLUME" == "Y" ]]; then
    echo ""
    echo "üóëÔ∏è === SUPPRESSION COMPL√àTE EN COURS ==="
    
    # Arr√™ter le conteneur
    docker stop "$CONTAINER_NAME" 2>/dev/null || echo "‚ÑπÔ∏è Conteneur d√©j√† arr√™t√©"
    
    # Supprimer le conteneur
    docker rm -f "$CONTAINER_NAME" 2>/dev/null || echo "‚ÑπÔ∏è Conteneur d√©j√† supprim√©"
    
    # Supprimer le volume (silencieux)
    docker volume rm "$VOLUME_NAME" 2>/dev/null || docker volume rm "$VOLUME_NAME" --force 2>/dev/null || echo "‚ÑπÔ∏è Volume d√©j√† supprim√© ou inexistant"
    
    # Red√©marrer avec docker-compose
    echo "üîÑ Red√©marrage des services..."
    if [[ -f "docker-compose.yml" ]]; then
        docker-compose up -d "$CONTAINER_NAME"
        echo "‚è≥ Attente du d√©marrage du conteneur..."
        sleep 15
        elif [[ -f "compose.yml" ]]; then
        docker compose up -d "$CONTAINER_NAME"
        echo "‚è≥ Attente du d√©marrage du conteneur..."
        sleep 15
    else
        echo "‚ö†Ô∏è Aucun fichier docker-compose trouv√©."
        
        # Cr√©er un nouveau conteneur PostgreSQL
        docker run -d --name "$CONTAINER_NAME" \
        --network host \
        -e POSTGRES_DB="$DB_NAME" \
        -e POSTGRES_USER="$PG_USER" \
        -e POSTGRES_PASSWORD="$PG_PASSWORD" \
        -v "$VOLUME_NAME":/var/lib/postgresql/data \
        postgres:16-alpine
        
        echo "‚è≥ Attente du d√©marrage du conteneur..."
        sleep 15
    fi
    
fi

# üìå Attendre que le conteneur soit pr√™t
echo ""
echo "‚è≥ V√©rification de l'√©tat du conteneur..."
for i in {1..30}; do
    if docker exec "$CONTAINER_NAME" pg_isready -U "$PG_USER" >/dev/null 2>&1; then
        echo "‚úÖ Conteneur PostgreSQL pr√™t !"
        break
    fi
    echo "‚è≥ Attente... ($i/30)"
    sleep 2
done

# üìå V√©rifier le type du fichier
FILE_TYPE=$(file -b --mime-type "$SELECTED_FILE")

# üìå Configuration du mot de passe
export PGPASSWORD=$PG_PASSWORD

# üìå V√©rifier et supprimer la base si elle existe
echo "üîç V√©rification de l'existence de la base '$DB_NAME'..."
DB_EXISTS=$(docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" 2>/dev/null | tr -d '[:space:]')

if [[ "$DB_EXISTS" == "1" ]]; then
    echo "‚ö†Ô∏è La base '$DB_NAME' existe d√©j√†. Suppression en cours..."
    docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();
    " >/dev/null 2>&1
    docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "DROP DATABASE \"$DB_NAME\";" >/dev/null 2>&1
fi

# üìå Cr√©ation de la base
echo "üèóÔ∏è Cr√©ation de la base '$DB_NAME'..."
docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d postgres -c "CREATE DATABASE \"$DB_NAME\";" >/dev/null 2>&1
if [[ $? -eq 0 ]]; then
    echo "‚úÖ Base '$DB_NAME' cr√©√©e avec succ√®s."
else
    echo "‚ùå Erreur lors de la cr√©ation de la base."
    # Tenter de se connecter directement √† la base si elle existe d√©j√†
    if docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
        echo "‚ÑπÔ∏è La base existe d√©j√† et est accessible. Continuons..."
    else
        exit 1
    fi
fi

# üìå IMPORTATION
if [[ "$FILE_TYPE" == "application/x-sql" ]] || [[ "$SELECTED_FILE" == *.sql ]]; then
    # Filtrer les lignes contenant ALTER OWNER pour √©viter l'erreur
    sed '/OWNER TO/d' "$SELECTED_FILE" | docker exec -i "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" >/dev/null
    elif [[ "$FILE_TYPE" == "application/octet-stream" ]] || [[ "$SELECTED_FILE" == *.dump ]]; then
    docker exec -i "$CONTAINER_NAME" pg_restore --no-owner -U "$PG_USER" -d "$DB_NAME" < "$SELECTED_FILE" >/dev/null
else
    echo "‚ùå Format de fichier non reconnu. Veuillez fournir un fichier .sql ou .dump."
    exit 1
fi


# üìå V√©rification du succ√®s de l'importation


if [[ $? -eq 0 ]]; then
    echo "‚úÖ Importation termin√©e avec succ√®s."
    tables_in_db=$(docker exec -t "$CONTAINER_NAME" psql -U "$PG_USER" -d "$DB_NAME" -t -c "\dt" | awk '{print $3}' | grep -v '^$' | sort | uniq)
    echo "Tables DB : $(echo "$tables_in_db" | paste -sd ' ')"
    # Comparaison simplifi√©e
    missing_in_db=$(comm -23 <(echo "$tables_in_sql" | sort) <(echo "$tables_in_db" | sort))
    missing_in_sql=$(comm -13 <(echo "$tables_in_sql" | sort) <(echo "$tables_in_db" | sort))
    if [[ -n "$missing_in_db" ]]; then
        echo "Manque dans DB : $missing_in_db"
    fi
    if [[ -n "$missing_in_sql" ]]; then
        echo "Manque dans SQL : $missing_in_sql"
    fi
else
    echo "‚ùå Erreur lors de l'importation."
    exit 1
fi

if [[ "$PURGE_VOLUME" == "y" || "$PURGE_VOLUME" == "Y" ]]; then
    echo "   üóëÔ∏è Volume compl√®tement supprim√© et recr√©√©"
fi
echo ""
SELECTED_FILE_TAR_GZ=$(echo "$SELECTED_FILE" | sed 's/\.sql$/\.tar\.gz/')
if [[ -f "$SELECTED_FILE_TAR_GZ" ]]; then
    sudo rm public/uploads -R
    sudo tar xvzf "$SELECTED_FILE_TAR_GZ"
    echo "vos fichiers de sauvegarde sont maintenant dans le dossier public/uploads"
else
    echo "Aucun fichier \"$SELECTED_FILE_TAR_GZ\" de sauvegarde trouv√©."
fi
echo "üéâ Restauration termin√©e avec succ√®s !"
