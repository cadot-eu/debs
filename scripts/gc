#!/bin/bash
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo -e "\nRestaure une sauvegarde duplicity."
    echo "Usage: restore [full|file|list] [fichier]"
    echo "Exemple: restore file monfichier.txt"
    exit 0
fi
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi
if [ -f .env.local ]; then
    export $(grep -v '^#' .env.local | xargs)
fi

if  [ -n "$BACKUP_URL" ]; then
    if [ -z $BACKUP_URL ]; then
        echo "no parameters "
    else
        case "$1" in
            full )
            duplicity restore $BACKUP_URL ./__restore --no-encryption ;;
            file )
                if [ -z "$2" ]
                then
                    echo "name of file?"
                else
                    DIR="$(dirname "${2}")" ;
                    mkdir -p "$DIR";
                    duplicity --file-to-restore "$2" $BACKUP_URL "$2"  --no-encryption
            fi;;
            list )
            duplicity list-current-files $BACKUP_URL ;;
            * )
            echo "get a parameter full,file or list" ;;
        esac
    fi
    
else
    echo "parameters empty in .env, get BACKUP_URL"
fi

  echo "Exemple: gc 'update'"
  exit 0
fi
#!/bin/bash

function show_usage (){
    printf "Usage: $0 [options ]\n"
    printf "\n"
    printf "Options:\n"
    printf " -p|--passtest, Pass tests\n"
    printf " -h|--help, Print help\n"
    
    return 0
}



passtest=0

message="$1"

#test option force is set
for i in $@
do
    case $i in
        --passtest| -p)
            passtest=1
            shift
        ;;
        --help| -h)
            show_usage
        ;;
    esac
    shift
done

if [ ! -d "tests" ]; then
     passtest=1
fi

if [[ `git status --porcelain` ]]   ; then
    if [ -f bin/phpunit ] && [ $passtest == 0 ] ; then
        echo "Running tests"
        CURRENT=`pwd`
        BASENAME=`basename "$CURRENT"`
        docker exec -it "$BASENAME" bin/phpunit
    fi
    if [ $? -ne 0 ]; then
        echo "ERREUR DANS LES TESTS ARRET" && exit
    else
        #sudo rm git_news.json
        #echo "{" > git_news.json
        #git log --pretty=format:'"%h":{  "subject": "%s",%n  "date": "%aD"%n },'>> git_news.json  
        #echo "}" >> git_news.json 
        #sed -i 's/},}/}}/' git_news.json 
        #sudo chown www-data: git_news.json
        git add .
        git commit -m "$message"
        git submodule foreach "git add . && git commit -m '$message'"
        git add .
        git commit -m "$message"
    fi
else
    echo "no modifs ;-)"
fi
