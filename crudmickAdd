#!/bin/bash
dossier=${PWD##*/}

# Définition des couleurs pour l'affichage
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
NC="\e[0m" # No Color

docker-compose down

clear

# on vérifie la présence de compose.yaml
if [ ! -f "compose.yaml" ]; then
    echo -e "${RED}Erreur : le fichier compose.yaml n'existe pas.${NC}"
    exit 1
fi

docker-compose down

echo -e "${GREEN}Lancement de l'initialisation des sous-modules Git et de l'installation des dépendances${NC}"

echo -e "${YELLOW}CE SCRIPT VA EFFECTUER LES OPÉRATIONS SUIVANTES :${NC}"
echo -e "- ${GREEN}git init si inexistant${NC}"
echo -e "- ${GREEN}lancement du docker-compose${NC}"
echo -e "- ${GREEN}Ajouter et initialiser les sous-modules Git de crudmick ${NC}"
echo -e "- ${GREEN}Mettre à jour les sous-modules existants${NC}"
echo -e "${YELLOW}INSTALLER LES DÉPENDANCES COMPOSER SUIVANTES :${NC}"
echo -e "- ${GREEN}symfony/password-hasher${NC} : Hashage des mots de passe."
echo -e "- ${GREEN}symfony/security-bundle${NC} : Gestion de la sécurité et des autorisations."
echo -e "- ${GREEN}--dev squizlabs/php_codesniffer ${NC} : formater du code PHP."
echo -e "- ${GREEN}knplabs/knp-paginator-bundle ${NC} : Pagination."
echo -e "- ${GREEN}twig/string-extra ${NC} : Manipulation de chaînes de caractères."
echo -e "- ${GREEN}symfony/validator${NC} : Vérification de la validité des données."
echo -e "${YELLOW}On écrase le security.yaml en ajoutant les nouvelles configurations, les routes ADMIN/SUPERADMIN ...${NC}"
echo -e "${YELLOW}On ajoute liip dans services pour qu'il soit accessible dans les services.${NC}"
echo -e "${YELLOW}Création de l'entité et du repository parametre...${NC}"
echo -e "${GREEN}Mise à jour de la base de données pour créer l'entité Parametre...${NC}"

echo -e "${YELLOW}Veuillez appuyer sur une touche pour continuer...${NC}"
read -n 1 -s

#si on a pas de .git on lance git init
if [ ! -d ".git" ]; then
    git init
fi

#on lance le docker-compose
docker compose up -d

#on attend que le container soit lancé
#on attend que le container soit lancé
while [ -z "$(docker inspect -f '{{.State.Running}}' "${dossier}-php-1")" ]; do
    sleep 1
done

#on lance git config --global --add safe.directory /app
#docker exec -it "${dossier}-php-1" git config --global --add safe.directory /app


# Parcourir et ajouter chaque dépendance
docker exec -it "${dossier}-php-1" composer require symfony/password-hasher symfony/security-bundle symfony/validator knplabs/knp-paginator-bundle twig/string-extra --no-interaction

docker exec -it "${dossier}-php-1" composer require --dev squizlabs/php_codesniffer zenstruck/foundry --no-interaction

user=$(whoami)
#On ajoute l'utilisateur dans le docker
docker exec -it "${dossier}-php-1" useradd --uid $(id -u ${user}) ${user}
#On l'ajoute au groupe root
docker exec -it "${dossier}-php-1" usermod -aG root ${user}

# Changer les permissions
echo -e "${GREEN}Changement des permissions${NC}"

docker exec -it "${dossier}-php-1" chown ${user}: .*
docker exec -it "${dossier}-php-1" chown -R ${user}: assets bin composer.* config LICENSE migrations public src templates var vendor
chown  ${user}: ../$dossier

mkdir -p src/DataFixtures
cat <<EOF > src/DataFixtures/AdminFixtures.php
<?php

namespace App\DataFixtures;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Repository\ParametresRepository;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use App\Entity\Parametres;

class AdminFixtures extends Fixture
{
    private \$compteRepository;
    private \$parametresrepository;
    private \$passwordHasher;

    // Injection des dépendances
    public function __construct(
        UserRepository \$compteRepository,
        ParametresRepository \$parametresrepository,
        UserPasswordHasherInterface \$passwordHasher
    ) {
        \$this->compteRepository = \$compteRepository;
        \$this->parametresrepository = \$parametresrepository;
        \$this->passwordHasher = \$passwordHasher;
    }

    public function load(ObjectManager \$em): void
    {
        \$docs = ['Mentions légales' => [], 'Conditions générales de vente' => [], 'Livraisons et retours' => []];
        foreach (\$docs as \$doc => \$tab) {
            \$type = isset(\$tab['type']) ? \$tab['type'] : '';
            \$text = isset(\$tab['text']) ? \$tab['text'] : '';
            \$aide = isset(\$tab['aide']) ? \$tab['aide'] : '';
            \$parametres = new Parametres();
            \$parametres->setNom(\$doc);
            \$parametres->setTypevaleur(\$type);
            \$parametres->setValeur(\$text);
            \$parametres->setAide(\$aide);
            \$em->persist(\$parametres);
            \$em->flush();
        }

        \$compte = new User();
        \$compte->setRoles(['ROLE_SUPERADMIN']);
        \$compte->setEmail('m@cadot.eu');
        \$compte->setIsVerified(true);
        \$hashedPassword = \$this->passwordHasher->hashPassword(
            \$compte,
            '******'
        );
        \$compte->setPassword(\$hashedPassword);
        \$em->persist(\$compte);
        \$em->flush();
    }
}
EOF


#on ecrase le config/packages/security.yaml
cat << EOF > config/packages/security.yaml
security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_SUPERADMIN: [ROLE_SUPERADMIN, ROLE_ADMIN]
    #  enable_authenticator_manager: true
    hide_user_not_found: false #voir erreur précise pour login
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        image_resolver: #pour liip_imagine afin de ne pas vérifier que l'utilisateur est connecté
            pattern: ^/media/cache/resolve
            security: false
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            logout:
                path: app_logout
                clear_site_data:
                    - cookies
                    - storage
                # where to redirect after logout
                target: home_index
            form_login:
                login_path: app_login
                check_path: app_login
            entry_point: form_login
            remember_me:
                secret: "%kernel.secret%" # required
                lifetime: 604800 # 1 week in seconds
                signature_properties: ["password", "updatedAt"] # cookies supprimr si password ou updatedAt chang
                token_provider: #mise en base de données du cookie
                    doctrine: true
            custom_authenticator: App\Security\AppAuthenticator

    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /admin/parametres/new, roles: ROLE_SUPERADMIN }
        - { path: /admin/fiche/new, roles: ROLE_SUPERADMIN }
        - { path: /admin/groupe, roles: [ROLE_PARTENAIRE, ROLE_SUPERADMIN] }
        - { path: /admin/produit, roles: [ROLE_PARTENAIRE, ROLE_SUPERADMIN] }
        - { path: /admin/mon-compte, roles: [ROLE_PARTENAIRE, ROLE_SUPERADMIN] }
        - {
              path: /admin/accueil,
              roles: [ROLE_ADMIN, ROLE_SUPERADMIN, ROLE_PARTENAIRE],
          }
        - { path: /admin/*, roles: [ROLE_ADMIN, ROLE_SUPERADMIN] }
        - { path: /superadmin/*, roles: [ROLE_SUPERADMIN] }
        # - { path: ^/profile, roles: ROLE_USER }
EOF

#on ajoute à la fin de config/services.yaml
#si app.filter.all_filter: absent
#si absent, on ajoute
if ! grep -q "app.filter.all_filter:" config/services.yaml; then
cat << EOF >> config/services.yaml
    app.filter.all_filter:
        class: App\Imagine\Filter\Loader\AllImagineFilter
        tags:
            - { name: "liip_imagine.filter.loader", loader: "allfilter" }
    Liip\ImagineBundle\Service\FilterService:
        alias: "liip_imagine.service.filter"

EOF
fi

#on créé une entité paramètre
cat << EOF > src/Entity/Parametres.php
<?php
namespace App\Entity;

use App\Repository\ParametresRepository;
use App\Entity\base\SlugTrait;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\DBAL\Types\Types;
use App\Entity\base\TimeTrait;
use Symfony\Component\DomCrawler\Crawler;
use App\Service\base\HtmlHelper;
use App\Service\base\ToolsHelper;
use App\Twig\base\CkeditorExtension;
use Symfony\Component\String\Slugger\AsciiSlugger;

#[ORM\Entity(repositoryClass: ParametresRepository::class)]
#[ORM\HasLifecycleCallbacks]
#[UniqueEntity('nom')]
class Parametres
{
    use SlugTrait;
    use TimeTrait;

    /**
     * TPL:no_action_add
     * TPL:no_access_deleted
     * TPL:no_created
     * TPL:no_updated
     * TPL:no_index
     * SEARCH:['id','nom','valeur']
     */
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: Types::INTEGER)]
    private \$id;

    //_____________________________________________
    //_____________________________________________
    //_____________________________________________
    #[ORM\Column(type: Types::STRING, length: 255, unique: true)]
    /**
     * string
     */
    private \$nom;

    //_____________________________________________
    //_____________________________________________
    //_____________________________________________
    /**
     * attr:{"data-controller" : "base--suneditor"}
     * attr:{"data-base--suneditor-toolbar-value": "§$AtypeOption[\"data\"]->getTypevaleur()§"}
     */
    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private \$valeur;

    //_____________________________________________
    //_____________________________________________
    //_____________________________________________
    /**
     * readonlyroot
     * TPL:no_index
     */
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private \$aide;

    //_____________________________________________
    //_____________________________________________
    //_____________________________________________
    /**
     * hiddenroot
     * TPL:no_index
     */
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private \$typevaleur = 'normal';

    //_____________________________________________
    //_____________________________________________
    //_____________________________________________

    public function getId(): ?int
    {
        return \$this->id;
    }

    public function getNom(): ?string
    {
        return \$this->nom;
    }

    public function setNom(string \$nom): self
    {
        \$this->nom = CkeditorExtension::ckclean(\$nom);
        return \$this;
    }

    public function getValeur(): ?string
    {
        return \$this->valeur;
    }

    public function setValeur(?string \$valeur): self
    {
        if (
            substr(\$valeur, 0, strlen('<p>') == '<p>') and
            substr(\$valeur, 0, -strlen('</p>') == '</p>')
        ) {
            \$this->valeur = substr(
                substr(\$valeur, strlen('<p>')),
                0,
                -strlen('</p>')
            );
        } else {
            \$this->valeur = \$valeur;
        }
        return \$this;
    }

    public function getAide(): ?string
    {
        return \$this->aide;
    }

    public function setAide(?string \$aide): self
    {
        \$this->aide = \$aide;
        return \$this;
    }

    public function getTypevaleur(): ?string
    {
        return \$this->typevaleur;
    }

    public function setTypevaleur(?string \$typevaleur): self
    {
        \$this->typevaleur = \$typevaleur;
        return \$this;
    }
}
EOF

cat << EOF > src/Repository/ParametresRepository.php
<?php
namespace App\Repository;

use App\Entity\Parametres;
use App\Repository\base\SearchRepositoryTrait;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method Parametres|null find(\$id, \$lockMode = null, \$lockVersion = null)
 * @method Parametres|null findOneBy(array \$criteria, array \$orderBy = null)
 * @method Parametres[]    findAll()
 * @method Parametres[]    findBy(array \$criteria, array \$orderBy = null, \$limit = null, \$offset = null)
 */
class ParametresRepository extends ServiceEntityRepository
{
    use SearchRepositoryTrait;

    public function __construct(ManagerRegistry \$registry)
    {
        parent::__construct(\$registry, Parametres::class);
    }

    /**
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function add(Parametres \$entity, bool \$flush = true): void
    {
        \$this->_em->persist(\$entity);
        if (\$flush) {
            \$this->_em->flush();
        }
    }

    /**
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function remove(Parametres \$entity, bool \$flush = true): void
    {
        \$this->_em->remove(\$entity);
        if (\$flush) {
            \$this->_em->flush();
        }
    }

    public function index(\$search, \$fields, \$sort, \$direction, \$categorie = null, \$deleted = false, \$etat = null)
    {
        \$sort = is_null(\$sort) ? 'a.id' : \$sort;
        \$qb = \$this->createQueryBuilder('a');

        if (\$deleted) {
            \$qb->where(\$qb->expr()->isNotNull('a.deletedAt'));
        } else {
            \$qb->where(\$qb->expr()->isNull('a.deletedAt'));
        }

        if (\$etat != null) {
            \$qb->andwhere(\$qb->expr()->eq('a.etat', ':etat'))
               ->setParameter('etat', \$etat);
        }

        \$ORX = \$qb->expr()->orx();
        foreach (\$fields as \$field) {
            \$ors = [];
            foreach (explode(' ', \$search) as \$s) {
                \$s = str_replace("'", "''", \$s);
                \$ors[] = \$qb->expr()->orx("a.\$field LIKE '%\$s%' ");
            }
            \$ORX->add(join(' AND ', \$ors));
        }
        \$qb->andWhere(\$ORX);

        if (\$categorie != null) {
            \$qb->andwhere(\$qb->expr()->isMemberOf(':categorie', 'a.categories'))->setParameter('categorie', \$categorie);
        }

        return \$qb->orderBy(\$sort, strtoupper(\$direction))
                  ->getQuery()
                  ->getResult();
    }

    // fin index
}
EOF

cat <<EOF > config/packages/paginator.yaml
knp_paginator:
  page_range: 5 # number of links shown in the pagination menu (e.g: you have 10 pages, a page_range of 3, on the 5th page you'll see links to page 4, 5, 6)
  default_options:
    page_name: page # page query parameter name
    sort_field_name: sort # sort field query parameter name
    sort_direction_name: direction # sort direction query parameter name
    distinct: true # ensure distinct results, useful when ORM queries are using GROUP BY statements
    filter_field_name: filterField # filter field query parameter name
    filter_value_name: filterValue # filter value query parameter name
  template:
    pagination: "base/knppagination.html.twig" # sliding pagination controls template
    sortable: "base/knpsortable.html.twig" # sort link template
    filtration: "base/knpfiltration.html.twig" # filters template
EOF

cat <<EOF > src/Controller/SecurityController.php
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

class SecurityController extends AbstractController
{

    public function __construct( UrlGeneratorInterface \$urlGenerator)
    {
        \$this->urlGenerator = \$urlGenerator;
    }

    #[Route(path: '/login', name: 'app_login')]
    public function login(AuthenticationUtils \$authenticationUtils): Response
    {
        if (\$this->getUser()) { //target_path est donné par l'exception listener
            try {
                \$this->urlGenerator->generate('target_path');
            } catch (RouteNotFoundException) {
                return \$this->redirectToRoute('admin_index');
            }
            return \$this->redirectToRoute('target_path');
        }

        // get the login error if there is one
        \$error = \$authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        \$lastUsername = \$authenticationUtils->getLastUsername();

        return \$this->render('security/login.html.twig', [
            'last_username' => \$lastUsername,
            'error' => \$error
        ]);
    }

    #[Route(path: '/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
}
EOF

cat <<EOF > src/Controller/ResetPasswordController.php
<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\ChangePasswordFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\Translation\TranslatorInterface;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
use App\Form\base\ResetPasswordRequestFormType;
use Flasher\Prime\FlasherInterface;

#[Route('/reset-password')]
class ResetPasswordController extends AbstractController
{
    use ResetPasswordControllerTrait;

    public function __construct(
        private ResetPasswordHelperInterface \$resetPasswordHelper,
        private EntityManagerInterface \$entityManager
    ) {
    }

    #[Route('', name: 'app_forgot_password_request')]
    public function request(Request \$request, MailerInterface \$mailer, TranslatorInterface \$translator): Response
    {
        \$form = \$this->createForm(ResetPasswordRequestFormType::class);
        \$form->handleRequest(\$request);

        if (\$form->isSubmitted() && \$form->isValid()) {
            return \$this->processSendingPasswordResetEmail(
                \$form->get('email')->getData(),
                \$mailer,
                \$translator
            );
        }

        return \$this->render('base/reset_password/request.html.twig', [
            'requestForm' => \$form->createView(),
        ]);
    }

    #[Route('/check-email', name: 'app_check_email')]
    public function checkEmail(): Response
    {
        if (null === (\$resetToken = \$this->getTokenObjectFromSession())) {
            \$resetToken = \$this->resetPasswordHelper->generateFakeResetToken();
        }

        return \$this->render('base/reset_password/check_email.html.twig', [
            'resetToken' => \$resetToken,
        ]);
    }

    #[Route('/reset/{token}', name: 'app_reset_password')]
    public function reset(Request \$request, UserPasswordHasherInterface \$passwordHasher, TranslatorInterface \$translator, string \$token = null, FlasherInterface \$flasher): Response
    {
        if (\$token) {
            \$this->storeTokenInSession(\$token);
            return \$this->redirectToRoute('app_reset_password');
        }

        \$token = \$this->getTokenFromSession();
        if (null === \$token) {
            throw \$this->createNotFoundException('Erreur sur le token');
        }

        try {
            \$user = \$this->resetPasswordHelper->validateTokenAndFetchUser(\$token);
        } catch (ResetPasswordExceptionInterface \$e) {
            \$flasher('reset_password_error', sprintf(
                '%s - %s',
                \$translator->trans(ResetPasswordExceptionInterface::MESSAGE_PROBLEM_VALIDATE, [], 'ResetPasswordBundle'),
                \$translator->trans(\$e->getReason(), [], 'ResetPasswordBundle')
            ));

            return \$this->redirectToRoute('app_forgot_password_request');
        }

        \$form = \$this->createForm(ChangePasswordFormType::class);
        \$form->handleRequest(\$request);

        if (\$form->isSubmitted() && \$form->isValid()) {
            \$this->resetPasswordHelper->removeResetRequest(\$token);
            \$encodedPassword = \$passwordHasher->hashPassword(
                \$user,
                \$form->get('plainPassword')->getData()
            );
            \$user->setPassword(\$encodedPassword);
            \$this->entityManager->flush();
            \$this->cleanSessionAfterReset();

            return \$this->redirectToRoute('home_index');
        }

        return \$this->render('base/reset_password/reset.html.twig', [
            'resetForm' => \$form
        ]);
    }

    private function processSendingPasswordResetEmail(string \$emailFormData, MailerInterface \$mailer, TranslatorInterface \$translator): RedirectResponse
    {
        \$user = \$this->entityManager->getRepository(User::class)->findOneBy([
            'email' => \$emailFormData,
        ]);

        if (!\$user) {
            return \$this->redirectToRoute('app_check_email');
        }

        try {
            \$resetToken = \$this->resetPasswordHelper->generateResetToken(\$user);
        } catch (ResetPasswordExceptionInterface \$e) {
            return \$this->redirectToRoute('app_check_email');
        }

        \$emailFrom = \$_ENV['MAILER_FROM'] ?? 'no-reply@example.com';
        \$emailFromName = \$_ENV['MAILER_FROM_NAME'] ?? 'Support';

        \$email = (new TemplatedEmail())
            ->from(new Address(\$emailFrom, \$emailFromName))
            ->to(\$user->getEmail())
            ->subject('Demande de réinitialisation de votre mot de passe')
            ->htmlTemplate('base/reset_password/email.html.twig')
            ->context([
                'resetToken' => \$resetToken,
            ]);

        \$mailer->send(\$email);

        \$this->setTokenObjectInSession(\$resetToken);

        return \$this->redirectToRoute('app_check_email');
    }
}
EOF

cat <<EOF > src/Entity/User.php
<?php

namespace App\Entity;

use App\Repository\UserRepository;
use App\Entity\base\SlugTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\DBAL\Types\Types;
use App\Entity\base\TimeTrait;
use App\Entity\base\VerifiedTrait;
use App\Entity\base\SituationTrait;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\HasLifecycleCallbacks]
#[
    UniqueEntity(
        fields: ['email'],
        message: 'Merci de contacter le site'
    )
]
#[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
#[ORM\Table(name: "utilisateurs")] 
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    use SlugTrait;
    use TimeTrait;
    use SituationTrait;
    use VerifiedTrait;

    /**
     * HIDE:{"roles[0]":"ROLE_SUPERADMIN"}
     * TPL:no_created
     * TPL:no_updated
     * SEARCH:['id']
     */
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: Types::INTEGER)]
    private \$id;
    //_____________________________________________
    /**
     * email
     */
    #[ORM\Column(type: Types::STRING, length: 180, unique: true)]
    private \$email;
    //_____________________________________________
    /**
     * choice
     * options:{"client":"ROLE_USER","administrateur":"ROLE_ADMIN","partenaire":"ROLE_PARTENAIRE"}
     * TWIG:join(',')
     * OPT:{"multiple":true,"expanded":true}
     */
    #[ORM\Column(type: Types::JSON)]
    private \$roles = [];
    //_____________________________________________
    /**
     * TPL:no_index
     * TPL:no_form
     */
    #[ORM\Column(type: Types::STRING, nullable: true)]
    private \$password;
    //_____________________________________________
    /**
     * image
     * tpl:index_FileImage
     */
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private \$logoentreprise;
    //_____________________________________________
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private \$nom;
    //_____________________________________________
    /**
     * tpl:no_index
     */

    public function getId(): ?int
    {
        return \$this->id;
    }
    public function getEmail(): ?string
    {
        return \$this->email;
    }
    public function setEmail(string \$email): self
    {
        \$this->email = \$email;
        return \$this;
    }
    public function getUserIdentifier(): string
    {
        return (string) \$this->email;
    }
    public function getRoles(): array
    {
        \$roles = \$this->roles;
        if (!\$roles) {
            \$roles[] = 'ROLE_USER';
        }
        return array_unique(\$roles);
    }
    public function setRoles(array \$roles): self
    {
        \$this->roles = \$roles;
        return \$this;
    }
    public function getPassword(): ?string
    {
        return \$this->password;
    }
    public function setPassword(?string \$password): self
    {
        \$this->password = \$password;
        return \$this;
    }
    public function eraseCredentials(): void
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // \$this->plainPassword = null;
    }
}
EOF

cat <<EOF > src/Entity/ResetPasswordRequest.php
<?php

namespace App\Entity;

use App\Repository\base\ResetPasswordRequestRepository;
use Doctrine\ORM\Mapping as ORM;
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestInterface;
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestTrait;

#[ORM\Entity(repositoryClass: ResetPasswordRequestRepository::class)]
class ResetPasswordRequest implements ResetPasswordRequestInterface
{
    use ResetPasswordRequestTrait;

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int \$id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?User \$user = null;

    public function __construct(object \$user, \DateTimeInterface \$expiresAt, string \$selector, string \$hashedToken)
    {
        \$this->user = \$user;
        \$this->initialize(\$expiresAt, \$selector, \$hashedToken);
    }

    public function getId(): ?int
    {
        return \$this->id;
    }

    public function getUser(): object
    {
        return \$this->user;
    }
}
EOF

cat <<EOF > src/Repository/UserRepository.php
<?php

namespace App\Repository;
use App\Entity\User;
use App\Repository\base\SearchRepositoryTrait;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

/**
 * @method User|null find(\$id, \$lockMode = null, \$lockVersion = null)
 * @method User|null findOneBy(array \$criteria, array \$orderBy = null)
 * @method User[]    findAll()
 * @method User[]    findBy(array \$criteria, array \$orderBy = null, \$limit = null, \$offset = null)
 */
class UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface
{
    use SearchRepositoryTrait;

    public function __construct(ManagerRegistry \$registry)
    {
        parent::__construct(\$registry, User::class);
    }

    /**
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function add(User \$entity, bool \$flush = true): void
    {
        \$this->_em->persist(\$entity);
        if (\$flush) {
            \$this->_em->flush();
        }
    }

    /**
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function remove(User \$entity, bool \$flush = true): void
    {
        \$this->_em->remove(\$entity);
        if (\$flush) {
            \$this->_em->flush();
        }
    }

    /**
     * Used to upgrade (rehash) the user's password automatically over time.
     */
    public function upgradePassword(PasswordAuthenticatedUserInterface \$user, string \$newHashedPassword): void
    {
        if (!\$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class(\$user)));
        }
        \$user->setPassword(\$newHashedPassword);
        \$this->_em->persist(\$user);
        \$this->_em->flush();
    }

    public function findByRoleAndSituation(string \$role)
    {
        \$role = mb_strtoupper(\$role);
        return \$this->createQueryBuilder('u')
            ->where('u.situation = :situation')
            ->andWhere('u.roles = :role')
            ->setParameter('situation', 'actif')
            ->setParameter('role', \$role)
            ->getQuery()
            ->getResult();
    }

    public function index(\$search, \$fields, \$sort, \$direction, \$categorie = null, \$deleted = false, \$etat = null)
    {
        \$sort = is_null(\$sort) ? 'a.id' : \$sort;
        \$qb = \$this->createQueryBuilder('a');
        if (\$deleted) {
            \$qb->where(\$qb->expr()->isNotNull('a.deletedAt'));
        } else {
            \$qb->where(\$qb->expr()->isNull('a.deletedAt'));
        }
        if (\$etat != null) {
            \$qb->andwhere(\$qb->expr()->eq('a.etat', ':etat'))
                ->setParameter('etat', \$etat);
        }
        \$ORX = \$qb->expr()->orx();
        foreach (\$fields as \$field) {
            \$ors = [];
            foreach (explode(' ', \$search) as \$s) {
                \$s = str_replace("'", "''", \$s);
                \$ors[] = \$qb->expr()->orx("a.\$field LIKE '%\$s%' ");
            }
            \$ORX->add(join(' AND ', \$ors));
        }
        \$qb->andWhere(\$ORX);
        if (\$categorie != null) {
            \$qb->andwhere(\$qb->expr()->isMemberOf(':categorie', 'a.categories'))->setParameter('categorie', \$categorie);
        }
        return \$qb->orderBy(\$sort, strtoupper(\$direction))
            ->getQuery()
            ->getResult();
    }
    //fin index
}
EOF


mkdir -p templates/security && cat <<EOF > templates/security/login.html.twig
{% extends '/admin/base.html.twig' %}

{% block title %}
	{{ t('Panneau de connexion') }}
{% endblock %}

{% block body %}
	<form action="{{ path('app_login') }}" method="post" data-turbo="false">
		{% if error %}
			<div class="alert alert-danger">
				{{ error.messageKey|trans(error.messageData, 'security') }}
			</div>
		{% endif %}

		<h1 class="h3 mb-3 font-weight-normal">
			Accès à l'espace membre
		</h1>
		<label for="inputEmail">
			{{ t('Email') }}
		</label>
		<input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control" autocomplete="email" required autofocus>
		<label for="inputPassword">
			{{ t('Password') }}
		</label>
		<input type="password" name="password" id="inputPassword" class="form-control" autocomplete="current-password" required>

		<input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

		<div class="checkbox mb-3">
			<label>
				<input type="checkbox" name="_remember_me">
				Gardez la connexion pendant une semaine
			</label>
		</div>
		<button class="btn btn-lg btn-primary" type="submit">
			Connexion
		</button>
		<a href="{{ path('app_forgot_password_request') }}">
			Réinitialiser mon mot de passe
		</a>
	</form>
{% endblock %}
EOF


# Chemin vers le fichier .gitmodules
GITMODULES_FILE=".gitmodules"

# Liste des sous-modules à ajouter
declare -A submodules=(
    ["src/Controller/base"]="git@github.com:cadot-eu/basecontroller.git"
    ["src/Command/base"]="git@github.com:cadot-eu/basecommand.git"
    ["src/EventSubscriber/base"]="git@github.com:cadot-eu/basesubscriber.git"
    ["src/Imagine"]="git@github.com:cadot-eu/baseimagine.git"
    ["src/Service/base"]="git@github.com:cadot-eu/baseservice.git"
    ["src/Twig/base"]="git@github.com:cadot-eu/basetwig.git"
    ["src/Entity/base"]="git@github.com:cadot-eu/basetraits.git"
    ["src/EventListener/base"]="git@github.com:cadot-eu/baselisteners.git"
    ["templates/base"]="git@github.com:cadot-eu/basetemplate.git"
    ["tests/basetests"]="git@github.com:cadot-eu/basetests.git"
    ["basetools"]="git@github.com:cadot-eu/basetools.git"
    ["src/Repository/base"]="git@github.com:cadot-eu/baseRepository.git"
    ["src/Security"]="git@github.com:cadot-eu/basesecurity.git"
    ["assets/js"]="git@github.com:cadot-eu/basejs.git"
    ["assets/controllers/base"]="git@github.com:cadot-eu/basestimulus.git"
)

# Fonction pour ajouter un sous-module
add_submodule() {
    local path="$1"
    local url="$2"
    
    # Vérifier si le sous-module existe déjà dans .gitmodules
    if git config -f "$GITMODULES_FILE" --get-regexp "^submodule\..*\.path$" | grep -q "$path"; then
        echo "Le sous-module '$path' existe déjà dans .gitmodules."
    else
        # Ajouter le sous-module
        git submodule add -b main "$url" "$path"
        git config -f "$GITMODULES_FILE" "submodule.$path.active" true
    fi
}

# Parcourir et ajouter chaque sous-module
for path in "${!submodules[@]}"; do
    url="${submodules[$path]}"
    add_submodule "$path" "$url"
done

# Initialiser et mettre à jour les sous-modules
git submodule update --init --recursive

#installation de crudmick
git clone https://github.com/cadot-eu/crudmick.git src/Command/crudmick

docker exec -it "${dossier}-php-1" php bin/console d:s:u --force

docker exec -it "${dossier}-php-1" mkdir templates/admin && cp templates/base.html.twig templates/admin/.