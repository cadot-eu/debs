#!/bin/bash

# Get current directory name
result=${PWD##*/}

# Create docker-compose.yml if it doesn't exist
if [ ! -f docker-compose.yml ]; then
    cat > docker-compose.yml << EOF
version: '3'
services:
  nginx:
    image: nginx:latest
    container_name: nginx_${result}
    ports:
      - "80"
    volumes:
      - "./${result}:/var/www/html"
      - "./nginx.conf:/etc/nginx/conf.d/default.conf"
    restart: unless-stopped
    depends_on:
      - php
    networks:
      - caddy

  php:
    container_name: php_${result}
    image: php:8.2-fpm
    volumes:
      - "./${result}:/var/www/html"
    networks:
      - caddy
    restart: unless-stopped

networks:
  caddy:
    external: true
EOF

    # Create nginx configuration
    cat > nginx.conf << EOF
server {
    listen 80;
    root /var/www/html;
    index index.php index.html;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass php_${result}:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF

    # Create directory for PHP files if it doesn't exist
    mkdir -p "${result}"
fi

# Stop and remove existing containers
docker compose down --remove-orphans

# Start containers
docker compose up -d

# Get the exposed port from nginx container
port=$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}{{(index $conf 0).HostPort}} {{end}}' nginx_${result})

# Create Caddyfile configuration
cat > Caddyfile << EOF
{
    email letsencrypt@cadot.eu
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
}

${result}.localhost {
    encode gzip zstd
    reverse_proxy localhost:${port}
    header {
        ?Server "Secured Server"
        ?X-Powered-By "Secured Server"
        ?X-Robot-Tag "Secured Server"
    }
}
EOF

echo "Site accessible at: https://${result}.localhost"
