#!/bin/bash

function show_usage (){
    printf "Usage: $0 [options ]\n"
    printf "\n"
    printf "Options:\n"
    printf " -f|--force, Force push\n"
    printf " -p|--passtest, Pass tests\n"
    printf " -h|--help, Print help\n"
    
    return 0
}




force=0
passtest=0

# Charger .env.local si présent
if [ -f .env.local ]; then
    export $(grep -v '^#' .env.local | xargs)
fi

message="$1"

#test option force is set

for i in "$@"
do
    case $i in
        --force| -f)
            force=1
            shift
        ;;
        --passtest| -p)
            passtest=1
            shift
        ;;
        --help| -h)
            show_usage
            exit 0
        ;;
    esac
    shift
done

if [ ! -d "tests" ]; then
    passtest=1
fi


if [[ $(git status --porcelain) ]] || [ $force == 1 ] ; then
    if [ -f bin/phpunit ] && [ $passtest == 0 ] ; then
        echo "Running tests"
        CURRENT=$(pwd)
        BASENAME=$(basename "$CURRENT")
        docker exec -it "$BASENAME" bin/phpunit
    fi
    if [ $? -ne 0 ]; then
        echo "ERREUR DANS LES TESTS ARRET" && exit
    else
        git add .
        
        # Si pas de message fourni, essayer Deepseek
        if [ -z "$message" ]; then
            if [ -z "$DEEPSEEK" ]; then
                echo "Erreur: ni titre de commit fourni, ni DEEPSEEK dans .env.local."
                exit 1
            fi
            # Générer le diff
            DIFF=$(git diff --cached)
            if [ -z "$DIFF" ]; then
                DIFF=$(git diff)
            fi
            if [ -z "$DIFF" ]; then
                echo "Aucune modification détectée."
                exit 1
            fi
            echo "Génération du commit par Deepseek..."
            # Prompt pour Deepseek (exemple pro, format direct)
            PROMPT="Voici le diff des modifications :\n$DIFF\n\nGénère uniquement un message de commit git professionnel, sans aucune phrase d'introduction, sans explication, sans préambule, sans guillemets, sans retour à la ligne avant ou après, et sans rien d'autre que le message de commit.\n\nExemples :\nfeat: ajoute la gestion des utilisateurs\nfix: corrige le bug d'affichage du menu\n\nLe message doit être court, descriptif, et formaté comme un vrai message de commit. La réponse doit être strictement le message de commit, rien d'autre."
            # Utiliser jq pour encoder le prompt correctement
            JSON_DATA=$(jq -n --arg prompt "$PROMPT" '{model: "deepseek-chat", messages: [{role: "user", content: $prompt}], max_tokens: 200}')
            message=$(curl -s -X POST https://api.deepseek.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $DEEPSEEK" \
            -d "$JSON_DATA" | jq -r '.choices[0].message.content' | head -n 1)
            if [ -z "$message" ] || [ "$message" == "null" ]; then
                echo "Erreur lors de la génération du message de commit avec Deepseek."
                exit 1
            fi
            echo "Message de commit généré : $message"
        fi
        
        git commit -m "$message"
        git submodule foreach "git add . && gcp '$message'"
        git add .
        git commit -m "$message"
        git push --all
        git push --tags
    fi
else
    echo "no modifs ;-)"
fi
