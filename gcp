################################################################################
# Help                                                                         #
################################################################################
Help()
{
    # Display Help
    echo "Commit and push with automatically tags"
    echo
    echo "#major or #minor in commit is possible"
    echo "Syntax: gcp [-h|i|t]"
    echo "options:"
    echo "h     Print this Help."
    echo "i     set v1.0.0"
}
# ---------------------------------------------------------------------------- #
#                             protection contre gcp                            #
# ---------------------------------------------------------------------------- #
[ -f .nogcp ] && echo 'no gcp here' && exit

# Get the options
while getopts "hit" option; do
    case $option in
        h) # display Help
            Help
        exit;;
        i) # reset
            git tag v1.0.0 && git push --tags
        exit;;
        t) # change tag
            git tag v"$2" && git push --tags
        exit;;
        \?) # incorrect option
            echo "Error: Invalid option"
        exit;;
    esac
done
##############################################################################
#if modifs
if [[ `git status --porcelain` ]]; then
    ##############################################################################
    # add tags                                                                   #
    ##############################################################################
    #get highest tag number
    VERSION=`git describe --abbrev=0 --tags`
    
    #replace . with space so can split into an array
    VERSION_BITS=(${VERSION//./ })
    
    #get number parts and increase last one by 1
    VNUM1=${VERSION_BITS[0]}
    VNUM2=${VERSION_BITS[1]}
    VNUM3=${VERSION_BITS[2]}
    VNUM1=`echo $VNUM1 | sed 's/v//'`
    
    # Check for #major or #minor in commit message and increment the relevant version number
    MAJOR=`git log --format=%B -n 1 HEAD | grep '#major'`
    MINOR=`git log --format=%B -n 1 HEAD | grep '#minor'`
    
    if [ "$MAJOR" ]; then
        echo "Update major version"
        VNUM1=$((VNUM1+1))
        VNUM2=0
        VNUM3=0
        elif [ "$MINOR" ]; then
        echo "Update minor version"
        VNUM2=$((VNUM2+1))
        VNUM3=0
    else
        echo "Update patch version"
        VNUM3=$((VNUM3+1))
    fi
    
    
    #create new tag
    #    NEW_TAG="v$VNUM1.$VNUM2.$VNUM3"
    
    #    echo "Updating $VERSION to $NEW_TAG"
    
    #get current hash and see if it already has a tag
    #    GIT_COMMIT=`git rev-parse HEAD`
    #NEEDS_TAG=`git describe --contains $GIT_COMMIT`
    
    #only tag if no tag already (would be better if the git describe command above could have a silent option)
    #if [ -z "$NEEDS_TAG" ]; then
    #    echo "Tagged with $NEW_TAG (Ignoring fatal:cannot describe - this means commit is untagged) "
    [ -f package.json ] && sed -i 's/"version.*$/\"version\":\"'$VNUM1.$VNUM2.$VNUM3'\",/' package.json
    git add ./*
    git commit -m "$1"
    #    git tag $NEW_TAG
    #    git push --tags
    #else
    #    echo "Already a tag on this commit"
    #fi
    git push --tags
    git push
    #if modif
else
    echo "no modifs ;-)"
fi
