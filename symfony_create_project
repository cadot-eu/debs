*#!/bin/bash
echo -e "${GREEN}On tue tous les dockers${NC}"
docker kill $(docker ps -q) 
# Définition des couleurs pour l'affichage
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
NC="\e[0m" # No Color

# Vérification des prérequis
if ! command -v git &> /dev/null; then
    echo -e "${RED}Erreur : Git n'est pas installé.${NC}"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    echo -e "${RED}Erreur : Docker n'est pas installé.${NC}"
    exit 1
fi

if ! command -v docker compose &> /dev/null; then
    echo -e "${RED}Erreur : Docker Compose n'est pas installé.${NC}"
    exit 1
fi

# Vérification du paramètre
if [ -z "$1" ]; then
    echo -e "${RED}Erreur : Vous devez fournir un nom de dossier.${NC}"
    echo -e "${YELLOW}Usage : $0 mon_projet${NC}"
    exit 1
fi

PROJECT_NAME=$1

# Clonage du projet
echo -e "${GREEN}Clonage du dépôt Git dans le dossier $PROJECT_NAME...${NC}"
if git clone git@github.com:cadot-eu/symfony.git "$PROJECT_NAME"; then
    echo -e "${GREEN}Clonage réussi.${NC}"
else
    echo -e "${RED}Échec du clonage. Vérifiez votre connexion ou votre accès SSH.${NC}"
    exit 1
fi

cd "$PROJECT_NAME" || exit 1

# Construction des conteneurs Docker
echo -e "${GREEN}Construction des images Docker...${NC}"
docker compose build --no-cache --pull

# Lancement des conteneurs
echo -e "${GREEN}Lancement des conteneurs Docker...${NC}"
docker compose up --pull always -d --wait

# Installation des dépendances Symfony
echo -e "${GREEN}Installation des librairies Symfony...${NC}"
docker exec -it "${PROJECT_NAME}-php-1" composer require \
symfony/asset-mapper \
symfony/asset \
symfony/twig-pack \
symfony/orm-pack \
symfony/mercure-bundle \
symfony/panther \
symfony/mailer \
symfony/ux-turbo \
symfony/twig-bundle \
symfony/asset-mapper \
symfony/asset \
symfony/twig-pack \
symfony/monolog-bundle \
api \
webonyx/graphql-php \
form

# Ajout des dev
echo -e "${GREEN}Installation de la debug bar et maker-bundle...${NC}"
docker exec -it "${PROJECT_NAME}-php-1" composer require --dev symfony/debug-pack symfony/maker-bundle symfony/phpunit-bridge

# Suppression du répertoire .git
echo -e "${YELLOW}Suppression du répertoire .git...${NC}"
rm -rf .git

# Arrêt des conteneurs Docker
echo -e "${GREEN}Arrêt des conteneurs Docker...${NC}"
docker compose down

# Reconstruction après modifications
echo -e "${GREEN}Reconstruction des conteneurs Docker...${NC}"
docker compose build --no-cache --pull

# Relancement des conteneurs
echo -e "${GREEN}Relancement des conteneurs Docker...${NC}"
docker compose up -d

# Affichage des conteneurs actifs
echo -e "${GREEN}Liste des conteneurs actifs :${NC}"
docker ps

# Changer les permissions
echo -e "${GREEN}Changement des permissions${NC}"
sudo chown $USER: .*
sudo chown $USER: *
sudo chown -R $USER: assets bin composer.* config LICENSE migrations public src templates var vendor
sudo chown $USER: ../$1

# On adapte la variable MERCURE de .env
echo -e "${GREEN}Adaptation de l'url Mercure dans le .env{NC}"
sed -i 's|example.com|localhost|' .env

# On informe qu'il faut créer le repoistory dans github
echo -e "${GREEN}Installation finie, créer le repistory github et l'ajouter manuellement{NC}"

echo -e "${GREEN}Ajout d'event pour mercure{NC}"
echo -e "\n$(cat <<EOF
document.addEventListener('DOMContentLoaded', () => {
  const eventSource = new EventSource("https://localhost/.well-known/mercure?topic=*");

  eventSource.onopen = () => {
    console.log('Connexion établie');
  };

  eventSource.onmessage = event => {
    console.log('Message reçu:', event);
    //on le décode
    const data = JSON.parse(event.data);
    console.log(data)
  };

  eventSource.onerror = event => {
    console.log('Erreur:', event);
  };
});
EOF
)" >> $1/assets/app.js
